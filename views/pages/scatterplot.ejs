<!DOCTYPE html>
<meta charset="utf-8">

<!-- Example based on http://bl.ocks.org/mbostock/3887118 -->
<!-- Tooltip example from http://www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html -->
<!-- Coding style based on http://gist.github.com/mbostock/5977197 -->

<style>
	#scatter {
	  font: 11px sans-serif;
	}

	.axis path,
	.axis line {
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
	}

	.dot {
	  stroke: #000;
	}

	.tooltip_c3 {
	  position: absolute;
	  width: 200px;
	  height: 28px;
	  pointer-events: none;
	}
</style>

<script src="js/d3x3.js"></script>
<div id="scatter"></div>

<script>
	var margin_c3 = {top: 20, right: 20, bottom: 30, left: 60},
		width_c3 = 960 - margin_c3.left - margin_c3.right,
		height_c3 = 500 - margin_c3.top - margin_c3.bottom;

	/* 
	 * value accessor - returns the value to encode for a given data object.
	 * scale - maps value to a visual display encoding, such as a pixel position.
	 * map function - maps from data value to display value
	 * axis - sets up axis
	 */ 

	// setup x 
	var xValue_c3 = function(d) { return d.Year;}, // data -> value
		xScale_c3 = d3x3.scale.linear().range([0, width_c3]), // value -> display
		xMap_c3 = function(d) { return xScale_c3(xValue_c3(d));}, // data -> display
		xAxis_c3 = d3x3.svg.axis().scale(xScale_c3).orient("bottom");

	// setup y
	var yValue = function(d) { return d["Wage"];}, // data -> value
		yScale = d3x3.scale.linear().range([height_c3, 0]), // value -> display
		yMap = function(d) { return yScale(yValue(d));}, // data -> display
		yAxis = d3x3.svg.axis().scale(yScale).orient("left");

	// setup fill color
	var cValue_c3 = function(d) { return d.Year;},
		color = d3x3.scale.category10();

	// add the graph canvas to the scatter div of the webpage
	var svg_c3 = d3x3.select("#scatter").append("svg")
		.attr("width", width_c3 + margin_c3.left + margin_c3.right)
		.attr("height", height_c3 + margin_c3.top + margin_c3.bottom)
	  .append("g")
		.attr("transform", "translate(" + margin_c3.left + "," + margin_c3.top + ")");

	// add the tooltip area to the webpage
	var tooltip_c3 = d3x3.select("#scatter").append("div")
		.attr("class", "tooltip_c3")
		.style("opacity", 0);

	// load data
	d3x3.csv("boxplot.csv", function(error, data) {

	  // change string (from CSV) into number format
	  data.forEach(function(d) {
		d.Year = +d.Year;
		d["Wage"] = +d["Wage"];
	//    console.log(d);
	  });

	  // don't want dots overlapping axis, so add in buffer to data domain
	  xScale_c3.domain([d3x3.min(data, xValue_c3)-1, d3x3.max(data, xValue_c3)+1]);
	  yScale.domain([d3x3.min(data, yValue)-1, d3x3.max(data, yValue)+1]);

	  // x-axis
	  svg_c3.append("g")
		  .attr("class", "x axis")
		  .attr("transform", "translate(0," + height_c3 + ")")
		  .call(xAxis_c3)
		.append("text")
		  .attr("class", "label")
		  .attr("x", width_c3)
		  .attr("y", -6)
		  .style("text-anchor", "end")
		  .text("Year");

	  // y-axis
	  svg_c3.append("g")
		  .attr("class", "y axis")
		  .call(yAxis)
		.append("text")
		  .attr("class", "label")
		  .attr("transform", "rotate(-90)")
		  .attr("y", 6)
		  .attr("dy", ".71em")
		  .style("text-anchor", "end")
		  .text("Wage");

	  // draw dots
	  svg_c3.selectAll(".dot")
		  .data(data)
		.enter().append("circle")
		  .attr("class", "dot")
		  .attr("r", 3.5)
		  .attr("cx", xMap_c3)
		  .attr("cy", yMap)
		  .style("fill", function(d) { return color(cValue_c3(d));}) 
		  .on("mouseover", function(d) {
			  tooltip_c3.transition()
				   .duration(200)
				   .style("opacity", .9);
			  tooltip_c3.html(d["EmployerName"] + "," + d["JobTitle"] + "<br/> (" + xValue_c3(d) 
				+ ", $" + yValue(d) + ")")
				   .style("left", (d3x3.event.pageX + 5) + "px")
				   .style("top", (d3x3.event.pageY - 28) + "px");
		  })
		  .on("mouseout", function(d) {
			  tooltip_c3.transition()
				   .duration(500)
				   .style("opacity", 0);
		  });

	  // draw legend
	  var legend = svg_c3.selectAll(".legend")
		  .data(color.domain())
		.enter().append("g")
		  .attr("class", "legend")
		  .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  // draw legend colored rectangles
	  legend.append("rect")
		  .attr("x", width_c3 - 18)
		  .attr("width", 18)
		  .attr("height", 18)
		  .style("fill", color);

	  // draw legend text
	  legend.append("text")
		  .attr("x", width_c3 - 24)
		  .attr("y", 9)
		  .attr("dy", ".35em")
		  .style("text-anchor", "end")
		  .text(function(d) { return d;})
	});

</script>